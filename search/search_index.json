{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Instructions cover the following (for now):</p> <ul> <li>Installing Cisco Secure Client on Arch Linux / Arch-based Linux distributions</li> <li>Enabling <code>vpnagentd</code> (Cisco Secure Client VPN Agent Daemon)</li> <li>Connecting to ECU VPN via Cisco Secure Client GUI</li> <li>Generating SSH keys &amp; <code>~/.ssh/config</code></li> <li>Verifying host keys and logging into <code>csstu.intra.ecu.edu</code></li> <li>Copying to server with <code>scp</code>, building, and submitting</li> </ul> <p>Tested: Arch Linux Server: <code>csstu.intra.ecu.edu</code> Red Hat Enterprise Linux 9.6 (Plow)</p> <p>View additional operating system release information by executing: <pre><code>[user@csstu ~]$ cat /etc/os-release\n</code></pre> Instruction Links</p> <ul> <li>Install Cisco Secure Client (pacman)</li> <li>Enable VPN Agent Daemon</li> <li>Connect to VPN via Cisco Secure Client</li> <li>SSH Keys and Configuration</li> <li>Login and Host Verification</li> <li>SCP \u2192 Build \u2192 Submit</li> </ul>"},{"location":"connect/","title":"Connect to ECU VPN","text":"<p>After installation, launch Cisco Secure Client from your applications menu:</p> <p></p> <p>Cisco Secure Client can also be launched from terminal: <pre><code>$ cisco-secure-client \n</code></pre></p> <p>Note: Launching the GUI from terminal under KDE/Wayland (and often with NVIDIA) will produce <code>GTK-CRITICAL</code> runtime warnings as the app is running parts of GTK before a widget exists (you can ignore them).</p> <p>Enter the ECU VPN gateway: </p> <p>Sign in with your ECU credentials: </p> <p>Accept the policy banner: </p> <p>After clicking <code>\u2713 Accept</code>, the statistics tab will open: </p>"},{"location":"install/","title":"Install Cisco Secure Client","text":"<p>Package Installation</p> <p>Note: The legacy <code>cisco-anyconnect</code> package is obsolete. \u2937 Use Cisco Secure Client 5.x.</p> <p>Navigate to the desired directory where the repository will be cloned. Use the <code>git clone</code> command followed by the URL of the repository:</p> <p><pre><code>git clone https://aur.archlinux.org/cisco-secure-client.git\n</code></pre> Enter the package directory (newly cloned package folder): <pre><code>cd cisco-secure-client\n</code></pre> Build and Install Package  Run <code>makepkg</code> within the package directory.   </p> <p>\u2937 <code>-s</code> (<code>--syncdeps</code>) flag will sync and install any missing dependencies required by PKGBUILD. \u2937 <code>-i</code> (<code>--install</code>) flag will install the package file with pacman after compilation. <pre><code>makepkg -si PKGBUILD\n</code></pre> Running <code>makepkg PKGBUILD</code> without <code>-i</code>or <code>--insert</code> flag requires  manual package file installation (<code>pacman -U pkgname-pkgver.pkg.tar.zst</code>):</p> <pre><code>sudo pacman -U cisco-secure-client-${pkgver}-${pkgrel}-x86_64.pkg.tar.zst\n</code></pre> <p>Installed path: <code>/opt/cisco/secureclient/bin/</code></p>"},{"location":"login/","title":"Login and Host Verification","text":"<p>First-time Login <pre><code>ssh -i /home/user/.ssh/id_ed25519 'ecu'\n</code></pre></p> <p>Depending on <code>StrictHostKeyChecking</code> and whether you pre-scanned the key, you may be prompted to trust the host.</p> <p>Note: Replace <code>user</code> with your user directory.</p> <p>After configuring SSH key and host entry (on this page), you can log in with <code>ssh ecu</code>:</p> <pre><code>\u273f user@archlinux [~] $ ssh ecu\n\n############################################################################\n#                     East Carolina University                             #\n#        Unauthorized use of this system is strictly prohibited.           #\n#                                                                          #\n#    By accessing this system you agree to comply with the Policies,       #\n# Guidelines, and Regulations at http://www.ecu.edu/itcs/help/itcspolicies #\n############################################################################\n\nLast login: Wed Sep 17 13:07:57 2025 from &lt;client-ip-address&gt;  # IP redacted\n[username@csstu ~]$ \n</code></pre> <p>Where <code>username</code> would be your PirateID.</p> <p>Verify <code>known_hosts</code> Fingerprints <pre><code>ssh-keygen -lf ~/.ssh/known_hosts | grep csstu.intra.ecu.edu\n</code></pre></p> <p>Fingerprints: <pre><code>3072 SHA256:SX5PMos63auLspbXjkAviHB/3e86f43pBBc2BRaM0ZU csstu.intra.ecu.edu (RSA)\n256  SHA256:QpqK5EOOHzKBj3GZobkJszm2nc3xfTofOhkQQWU19kA csstu.intra.ecu.edu (ECDSA)\n256  SHA256:aiDs3Pu8PvjDyyIUp6vN7d+s5lxQkz+Lgevu75b9TR0 csstu.intra.ecu.edu (ED25519)\n</code></pre></p>"},{"location":"ssh/","title":"SSH Keys and Configuration","text":"<p>Ensure a user ssh-agent is running <pre><code>systemctl --user enable --now ssh-agent\n</code></pre></p> <p>Generate a new ED25519 key and <code>ssh-add</code> <pre><code>ssh-keygen -t ed25519 -C \"username@ecu.edu\"\nssh-add ~/.ssh/id_ed25519\n</code></pre></p> <p>Note: Replace <code>username</code> with your PirateID. </p> <p>Create SSH Client Configuration File: <code>~/.ssh/config</code> <pre><code>mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh\nvim ~/.ssh/config\n</code></pre> \u2937 <code>-p</code> : If the specified parent directory DNE, <code>mkdir -p</code> will create  it along with any necessary intermediate directories. \u2937 <code>700</code> : Octal representation of permissions passed to <code>chmod</code> (command that changes file mode bits).</p> <p><pre><code>vim ~/.ssh/config\n</code></pre> Enter or paste the following: <pre><code>Host ecu\n    HostName csstu.intra.ecu.edu\n    User username  # PirateID\n    Port 22\n    IdentityFile ~/.ssh/id_ed25519\n    StrictHostKeyChecking accept-new\n    UserKnownHostsFile ~/.ssh/known_hosts\n</code></pre></p> <p>Pre-add the server host key (optional): <pre><code>ssh-keyscan csstu.intra.ecu.edu &gt;&gt; ~/.ssh/known_hosts\n</code></pre> Install your public key on the server: <pre><code>ssh-copy-id -i ~/.ssh/id_ed25519.pub ecu\n</code></pre> Expected output (example): <pre><code>/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: \"/home/user/.ssh/id_ed25519.pub\"\n...\nNumber of key(s) added: 1\nNow try logging in with: ssh -i /home/user/.ssh/id_ed25519 'ecu'\n</code></pre> where <code>user</code> would be your home user directory.</p>"},{"location":"vpn/","title":"Enable VPN Agent Daemon","text":"<p>Start and enable the agent:</p> <pre><code>sudo systemctl start vpnagentd.service\nsudo systemctl enable vpnagentd.service\n</code></pre> <p>Optionally, start the binary directly:</p> <pre><code>sudo /opt/cisco/secureclient/bin/vpnagentd\n</code></pre> <p>Check status of Cisco AnyConnect VPN background agent service:</p> <pre><code>systemctl status vpnagentd.service\n</code></pre> <p>Note: <code>vpnagentd.service</code> is the name of the systemd service.</p>"},{"location":"workflow/","title":"SCP \u2192 Build \u2192 Submit","text":"<p>Copy your project to the server using <code>scp</code> (Secure Copy Protocol): <pre><code>scp -r ~/project username@csstu.intra.ecu.edu:~\n</code></pre> \u2937 <code>-r</code> initiates recursive secure copy (necessary for directories)</p> <p>Note: Replace <code>username</code> with your PirateID. </p> <p>After setting up <code>Host ecu</code> alias in <code>~/.ssh/config</code>: <pre><code>scp -r ~/project ecu:~\n</code></pre></p> <p>Rebuild on the server: <pre><code>cd ~/project\nrm -rf build cmake-build-* CMakeFiles CMakeCache.txt\ncmake -S . -B build\ncmake --build build\n</code></pre></p> <p>Submission script</p> <p>Create <code>submit.sh</code>: <pre><code>vim submit.sh\n</code></pre></p> <p>Enter or Paste: <pre><code>#!/usr/bin/env bash\nSUBMIT=~gopal-assignments/csci6410-fall25/bin/submit\n\nFILES=$(find . -type f \\( -name \"*.c\" -o -name \"*.h\" -o -name \"CMakeLists.txt\" -o -name \"Makefile\" -o -iname \"readme*\" \\) -not -path \"./build/*\" -not -path \"./cmake-build-*/*\")\n\n${SUBMIT} 1 ${FILES}\n</code></pre></p> <p>Make <code>submit.sh</code> executable and run: <pre><code>chmod +x submit.sh\n./submit.sh\n</code></pre> \u2937 <code>+x</code> adds the execute permission for all users to the existing permissions</p>"}]}